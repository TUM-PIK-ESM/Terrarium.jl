var documenterSearchIndex = {"docs":
[{"location":"overview/software_architecture/#Software-architecture","page":"Software architecture","title":"Software architecture","text":"","category":"section"},{"location":"overview/software_architecture/","page":"Software architecture","title":"Software architecture","text":"warning: üößüöß Under construction üößüöß\nThe architecture of Terrarium.jl is still in an early prototype stage and is the subject of ongoing discussion. This page is a non-exhaustive summary of the current working concept and will be updated accordingly if and when the architecture changes.","category":"page"},{"location":"overview/software_architecture/#Numerical-implementation","page":"Software architecture","title":"Numerical implementation","text":"","category":"section"},{"location":"overview/software_architecture/","page":"Software architecture","title":"Software architecture","text":"Terrarium is based on the numerics and finite-volume method operators provided by Oceananigans.jl. All state variables are represented as Oceananigans Fields with computations automatically distributed using KernelAbstractions.jl. Spatial grids in Terrarium are similarly based on the corresponding Oceananigans grids, most prominently the RectilinearGrid which represents a rectangular volume divided orthogonally into smaller control volumes along the X, Y, and Z dimensions.","category":"page"},{"location":"overview/software_architecture/#The-AbstractModel-interface","page":"Software architecture","title":"The AbstractModel interface","text":"","category":"section"},{"location":"overview/software_architecture/","page":"Software architecture","title":"Software architecture","text":"A ‚Äúmodel‚Äù in Terrarium represents a collection of parameters and process types that characterize a simulation. All models must be defined as structs that subtype AbstractModel and will typically consist of the following fields/properties:","category":"page"},{"location":"overview/software_architecture/","page":"Software architecture","title":"Software architecture","text":"A grid that defines the discretization of the spatial domain\nAn initializer responsible for initializing state variables\nOne or more processes and/or sub-models that define the state variables and the dynamics of the system","category":"page"},{"location":"overview/software_architecture/","page":"Software architecture","title":"Software architecture","text":"The distinction between what constitutes a ‚Äúmodel‚Äù versus a ‚Äúprocess‚Äù should be based on whether or not there is a use case for running simulations of that model/process independently from other processes. Models should be built to be independently runnable standalone in a Simulation, while process types simply provide the concrete implementations of the physical processes to be included in a model. Since Terrarium models are composable, it should generally be trivial to convert a process into a full standalone model later (if necessary) without affecting the other model components that depend on it.","category":"page"},{"location":"overview/software_architecture/","page":"Software architecture","title":"Software architecture","text":"All AbstractModel and AbstractProcess types must additional provide dispatches for the following methods:","category":"page"},{"location":"overview/software_architecture/","page":"Software architecture","title":"Software architecture","text":"variables(::Model) returns a tuple of variable metadata declaring the state variables. Variables must be one of two types: prognostic or auxiliary (sometimes referred to as ‚Äúdiagnostic‚Äù). Prognostic variables fully characterize the state of the system at any given timestep and are updated according to their tendencies (i.e. G in the aforementioned equation). Tendencies are automatically allocated for each prognostic variable declared by the model.\ncompute_auxiliary!(state, ::Model) computes the values of all auxiliary variables (if necessary) assuming that the prognostic variables of the system in state are available for the current timestep.\ncompute_tendencies!(state, ::Model) computes the tendencies based on the current values of the prognostic and auxiliary variables stored in state.","category":"page"},{"location":"overview/software_architecture/","page":"Software architecture","title":"Software architecture","text":"In addition, AbstractModel  implementations must also provide dispatches for the following methods:","category":"page"},{"location":"overview/software_architecture/","page":"Software architecture","title":"Software architecture","text":"initialize!(state, ::Model, ::Initializer) computes any necessary initialization of the model state based on the user-supplied configuration and parameter settings. The additional initializer argument is extracted from the model and allows for alternative dispatches based on various initialization schemes for each model.\ntimestep!(state, ::Model, ::TimeStepper, Œît) updates the prognostic state variables according to the given timestepping scheme. This method can and should be implemented generically for any timestepping scheme but allows for model-specific overrides where necessary.\nget_grid(::Model) returns the spatial grid associated with the model. A default implementation is provided which assumes that the model defines a field named grid.\nget_initializer(::Model) returns the initializer for the model. A default implementation is provided which assumes that the model defines a field named initializer.","category":"page"},{"location":"overview/software_architecture/#State-variables","page":"Software architecture","title":"State variables","text":"","category":"section"},{"location":"overview/software_architecture/","page":"Software architecture","title":"Software architecture","text":"State variables are realized as Oceananigans Fields defined over the model grid. Each variable returned by the variables method will be allocated a corresponding Field with boundary conditions and initial values specified by one or more AbstractInitializers defined on the model. This allocation occurs when creating a Simulation by calling  initialize(model). The resulting Simulation object will have a property state of type StateVariables which holds all of the Fields for each state variable defined by the model.","category":"page"},{"location":"overview/software_architecture/","page":"Software architecture","title":"Software architecture","text":"As an example, suppose we are implementing a new model MyModel and we want to define the necessary state variables. We do this by defining a new dispatch of the variables method:","category":"page"},{"location":"overview/software_architecture/","page":"Software architecture","title":"Software architecture","text":"variables(::MyModel) = (\n\tprognostic(:progvar, XYZ()),\n\tauxiliary(:auxvar, XYZ()),\n\tauxiliary(:bc, XY()),\n)","category":"page"},{"location":"overview/software_architecture/","page":"Software architecture","title":"Software architecture","text":"This will result in a total of four state variables being allocated when initialize(model) is called: two auxiliary variables named auxvar and bc as well as one prognostic variable named progvar along with its corresponding tendency which is created automatically. The second argument to the variable metadata constructors prognostic and auxiliary is a subtype of VarDims which specifies on which spatial dimensions the state variable should be defined. XYZ() corresponds to a 3D Field which is discretized both laterally (along spatial grid cells) and along the vertical axis. Currently, Terrarium only supports a single 3D grid representing variables defined in the soil domain, though this may change in the near future in order to accommodate multi-layer snow and canopy processes. XY() corresponds to a 2D field which is discretized along the lateral dimension only. Note that Terrarium also currently supports only 1D (vertical) dynamics so all grid cells on the X and Y axes will be assumed independent. This is equivalent to what is typically called a single column model, or column-based parameterization in atmosphere and ocean modeling. However, building on Oceananigans means that we have a clear path to relax this assumption in the future!","category":"page"},{"location":"physics/soil_energy_water/#Soil-hydrothermal-dynamics","page":"Energy and water balance","title":"Soil hydrothermal dynamics","text":"","category":"section"},{"location":"physics/soil_energy_water/","page":"Energy and water balance","title":"Energy and water balance","text":"warning: Warning\nThis page is a work in progress. If you have any questions or notice any errors, please raise an issue.","category":"page"},{"location":"physics/soil_energy_water/#Heat-transfer","page":"Energy and water balance","title":"Heat transfer","text":"","category":"section"},{"location":"physics/soil_energy_water/","page":"Energy and water balance","title":"Energy and water balance","text":"Heat transfer along the vertical axis perpendicular to the land surface can be represented according to the heat equation, with the upper boundary set to surface temperature and the lower boundary set to a constant positive heat flux representing heat produced by the inner earth (Lachenbruch 1986, Jaeger 1965). If both the upper and lower boundaries are assumed to be constant over time, the steady-state temperature profile takes the form of a continuous piecewise linear function increasing over depth with the slope determined by the thermal properties of the ground material. The instantaneous temperature field can then be generally represented as","category":"page"},{"location":"physics/soil_energy_water/","page":"Energy and water balance","title":"Energy and water balance","text":"beginequation\nT(zt) = T_0 + fracQ_textgeokappa_texth(z)z + Delta T(zt)\nendequation","category":"page"},{"location":"physics/soil_energy_water/","page":"Energy and water balance","title":"Energy and water balance","text":"where T(zt) is the temperature field (K) over depth z (m) and time t (s), T_0 is the mean annual GST (K), Q_textgeo is the geothermal heat flux (W/m¬≤), and kappa_texth(z) (W/m K) is the thermal conductivity which may vary with depth depending on the material. The last term Delta T(zt) represents transient disturbances to the steady state temperature profile due to both seasonal and long-term fluctuations in the upper and lower boundary conditions of the vertical domain. Simulating the impacts of these transient changes is one of the primary objectives of most numerical permafrost and land surface models.","category":"page"},{"location":"physics/soil_energy_water/","page":"Energy and water balance","title":"Energy and water balance","text":"Diffusive heat flow in a solid medium is governed by Fourier's law,","category":"page"},{"location":"physics/soil_energy_water/","page":"Energy and water balance","title":"Energy and water balance","text":"beginequation\n    mathbfj_texth cdot mathbfn_z = -kappa_texthfracpartial Tpartial z\nendequation","category":"page"},{"location":"physics/soil_energy_water/","page":"Energy and water balance","title":"Energy and water balance","text":"where mathbfj_texth (W/m¬≤) is the diffusive heat flux vector and mathbfn_z is the upward facing normal vector along the vertical z axis.","category":"page"},{"location":"physics/soil_energy_water/","page":"Energy and water balance","title":"Energy and water balance","text":"Since ground materials are often porous, i.e., there exists void space between the solid particles, it is necessary to consider the potential presence of water and/or ice in this void space, which is hereafter referred to as pore space, or simply, soil pores. The thermal effects of water and ice can be accounted for by considering not only the temperature of the material but rather the total internal energy of the elementary volume. Combining the diffusive flux with a potential advective heat flux j_z^textw due to water flow yields the energy conservation law,","category":"page"},{"location":"physics/soil_energy_water/","page":"Energy and water balance","title":"Energy and water balance","text":"beginequation\nfracpartial U(Ttheta)partial t - nabla cdot left(mathbfj_texth + mathbfj_h^textwright) - F_h(zt) = 0\nendequation","category":"page"},{"location":"physics/soil_energy_water/","page":"Energy and water balance","title":"Energy and water balance","text":"where U(Ttheta) (J/m¬≥) is the volumetric internal energy as a function of temperature and total water/ice content theta (m¬≥/m¬≥), and F_h(zt) is an inhomogeneous heat source/sink (forcing) term.","category":"page"},{"location":"physics/soil_energy_water/","page":"Energy and water balance","title":"Energy and water balance","text":"The advective heat flux j_texth^textw can be represented as,","category":"page"},{"location":"physics/soil_energy_water/","page":"Energy and water balance","title":"Energy and water balance","text":"beginequation\nmathbfj_texth^textw = left( c_textw T + L_textsl right) mathbfj_textw rho_textw\nendequation","category":"page"},{"location":"physics/soil_energy_water/","page":"Energy and water balance","title":"Energy and water balance","text":"where L_textsl and c_textw (J/kg) represent the specific latent heat of fusion and heat capacity of liquid water respectively. This flux term accounts for the energy transferred by the movement of water within the soil matrix. In model configurations that neglect subsurface water flow, this flux term is implicitly assumed to be zero.","category":"page"},{"location":"physics/soil_energy_water/#Energy-temperature-closure","page":"Energy and water balance","title":"Energy-temperature closure","text":"","category":"section"},{"location":"physics/soil_energy_water/","page":"Energy and water balance","title":"Energy and water balance","text":"The constitutive relationship between energy and temperature plays a key role in characterizing the subsurface energy balance. This relation can be defined in integral form as","category":"page"},{"location":"physics/soil_energy_water/","page":"Energy and water balance","title":"Energy and water balance","text":"beginequation\n    U(Ttheta) = int_T_textref^T tildeC(xtheta)  dx\n    = overbraceHC(thetawthetai)leftT-T_textrefright^textSensible + overbracedensityw LHFthetaw(Tthetawi)^textLatent\nendequation","category":"page"},{"location":"physics/soil_energy_water/","page":"Energy and water balance","title":"Energy and water balance","text":"where tildeC is referred to as the effective or apparent heat capacity and T_textref is a reference temperature. The apparent heat capacity is then defined as the derivative of the energ-temperature relation,","category":"page"},{"location":"physics/soil_energy_water/","page":"Energy and water balance","title":"Energy and water balance","text":"beginequation\ntildeC(Ttheta) = fracpartial Upartial T =\noverbraceC(theta_textwtheta) + T fracpartial Cpartial theta_textwfracpartial theta_textwpartial T^textSensible +\noverbracerho_textw L_textsl fracpartialtheta_textwpartial T^textLatent\nendequation","category":"page"},{"location":"physics/soil_energy_water/","page":"Energy and water balance","title":"Energy and water balance","text":"where theta_textw(Ttheta) is the volumetric unfrozen water content as a function of temperature and total water/ice content is the bulk volumetric material heat capacity of the volume as a function of the unfrozen and total water contents;  rho_textw (kg/m¬≥) and L_textsl (J/kg) correspond to the density and specific latent heat of fusion of water, respectively. The grouping of terms on the right-hand side show the partitioning of energy change into sensible and latent heat. The sensible component represents the energy necessary to heat a volume of the material to a particular temperature, whereas the latent component corresponds to the energy required for the phase change of water in the volume from solid (frozen) to liquid (thawed).","category":"page"},{"location":"physics/soil_energy_water/","page":"Energy and water balance","title":"Energy and water balance","text":"In the simplest case where we neglect the effect of capillary action in the soil, the energy-temperature relation can be derived according to that of \"free\" water (i.e. unbound by the soil matrix),","category":"page"},{"location":"physics/soil_energy_water/","page":"Energy and water balance","title":"Energy and water balance","text":"beginequation\n    theta_textw(U) =\n        begincases\n            0                    U  -rho_textwL_textsltheta \n            fracUL  -rho_textwL_textsltheta leq U  0 \n            theta               U geq 0\n        endcases\nendequation","category":"page"},{"location":"physics/soil_energy_water/","page":"Energy and water balance","title":"Energy and water balance","text":"with temperature then determined by","category":"page"},{"location":"physics/soil_energy_water/","page":"Energy and water balance","title":"Energy and water balance","text":"beginequation\n    U^-1(U(Ttheta)) =\n    begincases\n    fracU(Ttheta) - rho_textwL_textslthetaC  U(Ttheta)  -rho_textwL_textsltheta \n    0  0 leq U(Ttheta) leq rho_textwL_textsltheta \n    fracU(Ttheta)C    U(Ttheta) geq 0\n    endcases\nendequation","category":"page"},{"location":"physics/soil_energy_water/","page":"Energy and water balance","title":"Energy and water balance","text":"where C = C(theta_textwtheta) is the volumetric heat capacity (J/K/m¬≥) as a function of the unfrozen and total water content.","category":"page"},{"location":"physics/soil_energy_water/#Vertical-water-transport-in-variably-saturated-soil","page":"Energy and water balance","title":"Vertical water transport in variably saturated soil","text":"","category":"section"},{"location":"physics/soil_energy_water/","page":"Energy and water balance","title":"Energy and water balance","text":"The vertical flow of water in porous media, such as soils, can be formulated as following the conservation law","category":"page"},{"location":"physics/soil_energy_water/","page":"Energy and water balance","title":"Energy and water balance","text":"    phifracpartialvartheta(psi)partial t - nabla cdot textbfj_textw - F_textw(zt) = 0","category":"page"},{"location":"physics/soil_energy_water/","page":"Energy and water balance","title":"Energy and water balance","text":"where phi is the natural porosity (or saturated water content) of the soil volume and F_textw(zt) (m/s) is an inhomogeneous source/sink (forcing) term.","category":"page"},{"location":"physics/soil_energy_water/","page":"Energy and water balance","title":"Energy and water balance","text":"Vertical fluxes in the soil column be represented by combining gravity-driven advection with Darcy's law","category":"page"},{"location":"physics/soil_energy_water/","page":"Energy and water balance","title":"Energy and water balance","text":"beginequation\ntextbfj_textw cdot mathbfn = -kappa_textwfracpartial left(psi + zright)partial z\nendequation","category":"page"},{"location":"physics/soil_energy_water/","page":"Energy and water balance","title":"Energy and water balance","text":"where psi (m) is the matric potential. Substituting this equation into the aforementioned conservation law yields the widely known Richardson-Richards equation for variably saturated flow in porous media (Richards 1931).","category":"page"},{"location":"api_reference/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api_reference/#Core.Type-Union{Tuple{Terrarium.AbstractLandGrid}, Tuple{Model}} where Model<:Terrarium.AbstractModel","page":"API Reference","title":"Core.Type","text":"Convenience constructor for all AbstractLandModel types that allows the grid to be passed as the first positional argument.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Oceananigans.Fields.Field","page":"API Reference","title":"Oceananigans.Fields.Field","text":"Field(\n    grid::AbstractLandGrid,\n    dims::VarDims,\n    boundary_conditions=nothing,\n    args...;\n    kwargs...\n)\n\nAuxiliary constructor for an Oceananigans Field on grid with the given Terrarium variable dims and boundary conditions. Additional arguments are passed direclty to the Field constructor. The location of the Field is determined by VarDims defined on var.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#RingGrids.Field-Union{Tuple{LY}, Tuple{LX}, Tuple{Field{LX, LY, Nothing}, ColumnRingGrid}} where {LX, LY}","page":"API Reference","title":"RingGrids.Field","text":"Field(field, grid; fill_value)\n\n\nConverts the given Oceananigans Field to a RingGrids.Field with a ring grid matching that of \n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.AbstractBulkWeightingScheme","page":"API Reference","title":"Terrarium.AbstractBulkWeightingScheme","text":"Base type for bulk weighting/mixing schemes that calculate weighted mixture of material properties such as conductivities or densities.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.AbstractClosureRelation","page":"API Reference","title":"Terrarium.AbstractClosureRelation","text":"abstract type AbstractClosureRelation\n\nBase type for prognostic variable closure relations for differential equations of the form:\n\nfracpartial g(u)partial t = F(u)\n\nwhere F represents the RHS tendency as a function of the state variable u, and g(u) is a closure or constitutive relation that maps u to the physical units matching the tendency. Common examples in soil hydrothermal modeling are temperature-enthalpy and saturation-pressure relations.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.AbstractEnergyBalanceModel","page":"API Reference","title":"Terrarium.AbstractEnergyBalanceModel","text":"abstract type AbstractEnergyBalanceModel{NF, GR, TS} <: Terrarium.AbstractModel{NF, GR, TS}\n\nBase type for surface energy balance models.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.AbstractGroundModel","page":"API Reference","title":"Terrarium.AbstractGroundModel","text":"abstract type AbstractGroundModel{NF, GR, TS} <: Terrarium.AbstractModel{NF, GR, TS}\n\nBase type for ground (e.g. soil and rock) models.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.AbstractHydrologyModel","page":"API Reference","title":"Terrarium.AbstractHydrologyModel","text":"abstract type AbstractHydrologyModel{NF, GR, TS} <: Terrarium.AbstractModel{NF, GR, TS}\n\nBase type for surface hydrology models.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.AbstractInitializer","page":"API Reference","title":"Terrarium.AbstractInitializer","text":"Base type for model initializers. Implementations should provide a dispatch of the initialize!(state, model::M, init::I) method where M corresponds to the model type and I to the initializer. An implementation of get_field_initializers can also be provided which returns a NamedTuple of initializer functions for individual state variable fields.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.AbstractLandModel","page":"API Reference","title":"Terrarium.AbstractLandModel","text":"AbstractLandModel <: AbstractModel\n\nBase type for full land models which couple together multiple component models.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.AbstractModel","page":"API Reference","title":"Terrarium.AbstractModel","text":"abstract type AbstractModel{NF, Grid<:(Terrarium.AbstractLandGrid{NF}), TS<:Terrarium.AbstractTimeStepper}\n\nBase type for all models.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.AbstractProcess","page":"API Reference","title":"Terrarium.AbstractProcess","text":"AbstractProcess{NF}\n\nBase type for all processes which define physics or parameterizations but are not standalone models.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.AbstractSnowModel","page":"API Reference","title":"Terrarium.AbstractSnowModel","text":"abstract type AbstractSnowModel{NF, GR, TS} <: Terrarium.AbstractModel{NF, GR, TS}\n\nBase type for snow models.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.AbstractSoilET","page":"API Reference","title":"Terrarium.AbstractSoilET","text":"Base type for evapotranspirative forcing terms in soil layers.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.AbstractSoilHydraulics","page":"API Reference","title":"Terrarium.AbstractSoilHydraulics","text":"Base type for soil hydraulic properties and parameterization schemes.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.AbstractSoilModel","page":"API Reference","title":"Terrarium.AbstractSoilModel","text":"abstract type AbstractSoilModel{NF, GR, TS} <: Terrarium.AbstractGroundModel{NF, GR, TS}\n\nBase type for soil ground models.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.AbstractSoilRunoff","page":"API Reference","title":"Terrarium.AbstractSoilRunoff","text":"Base type for soil/subsurface runoff schemes.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.AbstractTimeStepper","page":"API Reference","title":"Terrarium.AbstractTimeStepper","text":"Base type for time steppers.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.AbstractTimeStepperCache","page":"API Reference","title":"Terrarium.AbstractTimeStepperCache","text":"Base type for time-stepper state caches.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.AbstractUnsatK","page":"API Reference","title":"Terrarium.AbstractUnsatK","text":"Base type for unsaturated hydraulic conductivity parameterizations.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.AbstractVariable","page":"API Reference","title":"Terrarium.AbstractVariable","text":"abstract type AbstractVariable{VD<:Terrarium.VarDims}\n\nBase type for state variable specification.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.AbstractVegetationModel","page":"API Reference","title":"Terrarium.AbstractVegetationModel","text":"abstract type AbstractVegetationModel{NF, GR, TS} <: Terrarium.AbstractModel{NF, GR, TS}\n\nBase type for vegetation/carbon models.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.AbstractVerticalFlow","page":"API Reference","title":"Terrarium.AbstractVerticalFlow","text":"Base type for implementations of soil water flow dynamics.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.AnyField","page":"API Reference","title":"Terrarium.AnyField","text":"Type alias for an AbstractField with any X, Y, Z location or grid.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.AnyFieldTimeSeries","page":"API Reference","title":"Terrarium.AnyFieldTimeSeries","text":"Type alias for a FieldTimeSeries with any X, Y, Z location or grid.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.AuxiliaryVariable","page":"API Reference","title":"Terrarium.AuxiliaryVariable","text":"struct AuxiliaryVariable{VD<:Terrarium.VarDims, DT<:IntervalSets.AbstractInterval, UT<:Unitful.Units} <: Terrarium.AbstractVariable{VD<:Terrarium.VarDims}\n\nRepresents an auxiliary (sometimes called \"diagnostic\") variable with the given name and dims on the spatial grid.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.ColumnBCs","page":"API Reference","title":"Terrarium.ColumnBCs","text":"Alias for ColumnBoundaryConditions\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.ColumnBoundaryConditions","page":"API Reference","title":"Terrarium.ColumnBoundaryConditions","text":"struct ColumnBoundaryConditions{TopBC, BottomBC} <: Terrarium.AbstractBoundaryConditions\n\nRepresents the boundary conditions applied at the top and bottom of a 1D column model discrietized along the vertical (depthwise) axis.\n\nProperties:\n\ntop::Any: Boundary condition(s) applied at the top of the vertical column.\nbottom::Any: Boundary condition(s) applied at the botom of the vertical column.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.ColumnGrid","page":"API Reference","title":"Terrarium.ColumnGrid","text":"ColumnGrid{NF, Arch<:AbstractArchitecture, RectGrid<:OceananigansGrids.RectilinearGrid} <: AbstractLandGrid\n\nRepresents a set of laterally independent vertical columns with dimensions (x, y, z) where x is the column dimension, y=1 is constant, and z is the vertical axis.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.ColumnRingGrid","page":"API Reference","title":"Terrarium.ColumnRingGrid","text":"struct ColumnRingGrid{NF, Arch, RingGrid<:RingGrids.AbstractGrid, MaskField<:(RingGrids.AbstractField{Bool}), RectGrid<:Oceananigans.Grids.RectilinearGrid} <: Terrarium.AbstractLandGrid{NF, Arch}\n\nRepresents a global (spherical) grid of independent, vertical columns where the spatial discretization in the horizontal direction is defined by a RingGrids.AbstractGrid. The resulting \n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.ConstantHydraulics","page":"API Reference","title":"Terrarium.ConstantHydraulics","text":"ConstantHydraulics{NF} <: AbstractSoilHydraulics\n\nRepresents a simple case where soil hydraulic properties are given as constant values. This is mostly provided just for testing, although it may be useful in certain cases where direct measurements of hydraulic properites are available.\n\nProperties:\n\ncond_unsat::Any: Unsaturated hydraulic conductivity formulation; defaults to cond_sat\ncond_sat::Any: Hydraulic conductivity at saturation [m/s]\nporosity::Any: Prescribed soil porosity [-]\nfield_capacity::Any: Prescribed field capacity [-]\nwilting_point::Any: Prescribed wilting point [-]\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.ConstantSoilCarbonDenisty","page":"API Reference","title":"Terrarium.ConstantSoilCarbonDenisty","text":"struct ConstantSoilCarbonDenisty{NF} <: Terrarium.AbstractSoilBiogeochemistry{NF}\n\nNaive implementation of soil biogeochemistry that just assumes there to be a constant organic content in all soil layers.\n\nProperties:\n\nœÅ_soc::Any: Soil organic carbon density [kg/m^3]\nœÅ_org::Any: Pure organic matter density [kg/m^3]\npor_org::Any: Natural porosity of organic material\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.DefaultBoundaryConditions","page":"API Reference","title":"Terrarium.DefaultBoundaryConditions","text":"Represents default boundary conditions for all state variables. This typically implies zero-flux boundary conditions on bounded domains and periodic boundary conditions on periodic domains.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.DefaultInitializer","page":"API Reference","title":"Terrarium.DefaultInitializer","text":"Marker type for a no-op initializer that leaves all Fields set to their default values.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.ExplicitTwoPhaseHeatConduction","page":"API Reference","title":"Terrarium.ExplicitTwoPhaseHeatConduction","text":"struct ExplicitTwoPhaseHeatConduction{ET} <: Terrarium.AbstractHeatOperator\n\nRepresents an explicit formulation of the two-phase heat conduction operator in 1D:\n\nfracpartial U(Tphi)partial t = nabla cdot kappa(T)nabla_x T(xt)\n\nwhere T is temperature [K], U is internal energy [J m‚Åª¬≥], and kappa is the thermal conductivity [W m K‚Åª¬π]. The closure field represents the temperature-energy closure U(Tphi) which relates temperature to internal energy via an arbitrary set of additional parameters phi which are determined by the model configuration.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.FieldBCs","page":"API Reference","title":"Terrarium.FieldBCs","text":"Alias for a NamedTuple of BoundaryCondition types.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.FieldInitializers","page":"API Reference","title":"Terrarium.FieldInitializers","text":"Creates a new FieldInitializers from the given keyword arguments where each argument corresponds to an initializer function or value for specific state variable defined in the model. The initializers can be any function, value, array, or Field that would be a valid input x to Oceananigans.set!(field, x). Optionally, FieldInitializers can wrap another \n\nFieldInitializers(temperature=(x,z) -> sin(2œÄ*z), saturation_water_ice=0)\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.FieldInitializers-2","page":"API Reference","title":"Terrarium.FieldInitializers","text":"struct FieldInitializers{names, Init<:Terrarium.AbstractInitializer, FieldInits} <: Terrarium.AbstractInitializer\n\nContainer type that bundles one or more initializer functions for individual state variable fields into a single AbstractInitializer. FieldInitializers can also optionally wrap another AbstractInitializer type whose field initializers will be merged with those in vars.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.FieldInputSource","page":"API Reference","title":"Terrarium.FieldInputSource","text":"struct FieldInputSource{NF, VD<:Terrarium.VarDims, names, Fields<:Tuple{Vararg{Oceananigans.Fields.AbstractField{LX, LY, LZ, G, NF} where {LX, LY, LZ, G}}}} <: InputSource{NF}\n\nInput source that reads directly from pre-specified Oceananigans Fields.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.FieldTimeSeriesInputSource","page":"API Reference","title":"Terrarium.FieldTimeSeriesInputSource","text":"struct FieldTimeSeriesInputSource{NF, VD<:Terrarium.VarDims, names, FTS<:Tuple{Vararg{FieldTimeSeries{LX, LY, LZ, TI, K, I, D, G, NF} where {LX, LY, LZ, TI, K, I, D, G}}}} <: InputSource{NF}\n\nInput source that reads input fields from pre-specified Oceananigans FieldTimeSeries.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.ForwardEuler","page":"API Reference","title":"Terrarium.ForwardEuler","text":"struct ForwardEuler{NF} <: Terrarium.AbstractTimeStepper{NF}\n\nSimple forward Euler time stepping scheme.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.ForwardEuler-Union{Tuple{Type{NF}}, Tuple{NF}} where NF","page":"API Reference","title":"Terrarium.ForwardEuler","text":"ForwardEuler(::Type{NF}; kwargs...)\n\nCreate a ForwardEuler timestepper with the given numeric format NF.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.HomogeneousSoil","page":"API Reference","title":"Terrarium.HomogeneousSoil","text":"struct HomogeneousSoil{NF} <: Terrarium.AbstractStratigraphy{NF}\n\nRepresents a soil stratigraphy of well mixed material with homogeneous soil texture.\n\nProperties:\n\ntexture::SoilTexture: Material composition of mineral soil componnet\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.Input","page":"API Reference","title":"Terrarium.Input","text":"Type-stable and GPU-friendly placeholder for input variables in model/process structs, allowing parameters/constants to be easily replaced by input Fields. Input can be provided as the value of a struct field or in an Oceananigans BoundaryCondition type and will result in an input variable being allocated with the given name and dimensions during model initialization.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.InputFields","page":"API Reference","title":"Terrarium.InputFields","text":"struct InputFields{NF, Grid<:(Terrarium.AbstractLandGrid{NF}), Input2D<:Oceananigans.Fields.AbstractField, Input3D<:Oceananigans.Fields.AbstractField}\n\nContainer type for holding data Fields for input variables. InputFields stores the Fields for each variable in separate dictionaries for 2D and 3D variables defined on the given grid. This allows for input variable Fields to be lazily allocated as-needed.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.InputProvider","page":"API Reference","title":"Terrarium.InputProvider","text":"struct InputProvider{NF, Grid<:(Terrarium.AbstractLandGrid{NF}), Inputs<:(InputFields{NF, Grid<:(Terrarium.AbstractLandGrid{NF})}), SourceType<:InputSource}\n\nActs as an interface between a given InputFields container and one or more InputSources that are responsible for initializing and updating the input Fields at each time step.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.InputSource","page":"API Reference","title":"Terrarium.InputSource","text":"abstract type InputSource{NF}\n\nBase type for input data sources. Implementations of InputSource are free to load data from any arbitrary backend but are required to implement the update_inputs!(::InputFields, ::InputSource, ::Clock) method. Implementations should additionally provide a constructor as a dispatch of InputSource.\n\nThe type argument NF corresponds to the numeric type of the input data.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.InputVariable","page":"API Reference","title":"Terrarium.InputVariable","text":"struct InputVariable{VD<:Terrarium.VarDims, UT<:Unitful.Units} <: Terrarium.AbstractVariable{VD<:Terrarium.VarDims}\n\nRepresents an input (e.g. forcing) variable with the given name and dims on the spatial grid.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.InverseQuadratic","page":"API Reference","title":"Terrarium.InverseQuadratic","text":"The inverse quadratic (or \"quadratic parallel\") bulk thermal conductivity formula (Cosenza et al. 2003):\n\nk = sum_i=1^N Œ∏·µ¢sqrtk·µ¢^2\n\nCosenza, P., Gu√©rin, R., and Tabbagh, A.: Relationship between thermal conductivity and water content of soils using numerical modelling, European Journal of Soil Science, 54, 581‚Äì588, https://doi.org/10.1046/j.1365-2389.2003.00539.x, 2003.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.LUEPhotosynthesis","page":"API Reference","title":"Terrarium.LUEPhotosynthesis","text":"struct LUEPhotosynthesis{NF} <: Terrarium.AbstractPhotosynthesis\n\nPhotosynthesis implementation from PALADYN (Willeit 2016) for C3 PFTs following the general light use efficiency model described in Haxeltine and Prentice 1996.\n\nAuthors: Maha Badri and Matteo Willeit\n\nProperties:\n\nœÑ25::Any: Value of œÑ at 25¬∞C\nKc25::Any: Value of Kc at 25¬∞C\nKo25::Any: Value of Ko at 25¬∞C\nq10_œÑ::Any: q10 for temperature-sensitive parameter œÑ\nq10_Kc::Any: q10 for temperature-sensitive parameter Kc\nq10_Ko::Any: q10 for temperature-sensitive parameter Ko\nŒ±_leaf::Any: Leaf albedo in PAR range [-]\ncq::Any: Conversion factor for solar radiation at 550 nm from J/m¬≤ to mol/m¬≤ [mol/J]\nk_ext::Any: Extinction coefficient for radiation through vegetation [-]\nŒ±_a::Any: Fraction of PAR assimilated at ecosystem level, relative to leaf level [-]\nt_CO2_high::Any: Parameter, PFT specific [¬∞C]\nt_CO2_low::Any: Parameter, PFT specific [¬∞C]\nt_photos_high::Any: Parameter, PFT specific [¬∞C]\nt_photos_low::Any: Parameter, PFT specific [¬∞C]\nŒ±_C3::Any: Intrinsic quantum efficiency of CO2 uptake in C3 plants [mol/mol]\nC_mass::Any: Atomic mass of carbon [gC/mol]\nŒ∏_r::Any: Shape parameter [-]\nday_length::Any: Day length [h/day]\nsec_day::Any: Seconds per day [s/day]\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.MedlynStomatalConductance","page":"API Reference","title":"Terrarium.MedlynStomatalConductance","text":"struct MedlynStomatalConductance{NF} <: Terrarium.AbstractStomatalConductance\n\nStomatal conductance implementation from PALADYN (Willeit 2016) following the optimal stomatal conductance model (Medlyn et al. 2011).\n\nAuthors: Maha Badri and Matteo Willeit\n\nProperties:\n\ng1::Any: Parameter in optimal stomatal conductance formulation, Lin et al. 2015 [-], PFT specific\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.ModelState","page":"API Reference","title":"Terrarium.ModelState","text":"struct ModelState{NF, Arch<:Oceananigans.Architectures.AbstractArchitecture, Grid<:Terrarium.AbstractLandGrid{NF, Arch<:Oceananigans.Architectures.AbstractArchitecture}, TimeStepper<:Terrarium.AbstractTimeStepper{NF}, Model<:Terrarium.AbstractModel{NF, Grid<:Terrarium.AbstractLandGrid{NF, Arch<:Oceananigans.Architectures.AbstractArchitecture}, TimeStepper<:Terrarium.AbstractTimeStepper{NF}}, StateVars<:Terrarium.AbstractStateVariables, Inputs<:InputProvider} <: Oceananigans.AbstractModel{TimeStepper<:Terrarium.AbstractTimeStepper{NF}, Arch<:Oceananigans.Architectures.AbstractArchitecture}\n\nRepresents the state of a \"simulation\" for a given model. ModelState consists of a clock, a model, and an initialized StateVariables data structure, as well as a cache for the timestepper and any relevant inputs provided by a corresponding InputProvider. The ModelState implements the Oceananigans.AbstractModel interface and can thus be treated as a \"model\" in Oceananigans Simulations and output reading/writing utilities.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.Namespace","page":"API Reference","title":"Terrarium.Namespace","text":"struct Namespace{Vars}\n\nRepresents a new variable namespace, typically from a subcomponent of the model. It is (currently) assumed that the name of the namespace corresponds to a property defined on the model type.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.NoFlow","page":"API Reference","title":"Terrarium.NoFlow","text":"Represents a hydrology scheme where soil water is immobile.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.PALADYNAutotrophicRespiration","page":"API Reference","title":"Terrarium.PALADYNAutotrophicRespiration","text":"struct PALADYNAutotrophicRespiration{NF} <: Terrarium.AbstractAutotrophicRespiration\n\nAutotrophic respiration implementation from PALADYN (Willeit 2016).\n\nAuthors: Maha Badri and Matteo Willeit\n\nProperties:\n\ncn_sapwood::Any: Sapwood parameter\ncn_root::Any: Root parameter\naws::Any: Ratio of total to respiring stem carbon, Cox 2001, PFT specific [-]\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.PALADYNCarbonDynamics","page":"API Reference","title":"Terrarium.PALADYNCarbonDynamics","text":"struct PALADYNCarbonDynamics{NF} <: Terrarium.AbstractVegetationCarbonDynamics\n\nVegetation carbon dynamics implementation following PALADYN (Willeit 2016) but considering only the sum of the vegetation carbon pools. The subsequent splitting into Cleaf, Cstem, C_root is not implemented for now.\n\nAuthors: Maha Badri \n\nProperties:\n\nSLA::Any: Specific leaf area (Kattge et al. 2011) [m¬≤/kgC], PFT specific\nawl::Any: Allometric coefficient, modified from Cox 2001 to account for bwl=1 [kgC/m¬≤], PFT specific\nLAI_min::Any: Minimum Leaf Area Index modified from Clark et al. 2011 [m¬≤/m¬≤], PFT specific\nLAI_max::Any: Maximum Leaf Area Index modified from Clark et al. 2011 [m¬≤/m¬≤], PFT specific\nŒ≥L::Any: Leaf turnover rate (Kattge et al. 2011) [1/year], PFT specific\nŒ≥R::Any: Root turnover rate [1/year], PFT specific\nŒ≥S::Any: Stem turnover rate modified from Clark et al. 2011 [1/year], PFT specific\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.PALADYNPhenology","page":"API Reference","title":"Terrarium.PALADYNPhenology","text":"struct PALADYNPhenology{NF} <: Terrarium.AbstractPhenology\n\nVegetation phenology implementation from PALADYN (Willeit 2016).\n\nAuthors: Maha Badri and Matteo Willeit\n\nProperties:\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.PALADYNVegetationDynamics","page":"API Reference","title":"Terrarium.PALADYNVegetationDynamics","text":"struct PALADYNVegetationDynamics{NF} <: Terrarium.AbstractVegetationDynamics\n\nVegetation dynamics implementation following PALADYN (Willeit 2016) for a single PFT based on the Lotka‚ÄìVolterra approach.\n\nAuthors: Maha Badri \n\nProperties:\n\nŒΩ_seed::Any: Vegetation seed fraction [-]\nŒ≥v_min::Any: Minimum vegetation disturbance rate [1/year]\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.PhysicalConstants","page":"API Reference","title":"Terrarium.PhysicalConstants","text":"struct PhysicalConstants{NF}\n\nA collection of general physical constants that do not (usually) need to be varied in parameter calibration.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.PrescribedAtmosphere","page":"API Reference","title":"Terrarium.PrescribedAtmosphere","text":"\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.PrescribedBC","page":"API Reference","title":"Terrarium.PrescribedBC","text":"struct PrescribedBC{progvar, BC<:Oceananigans.BoundaryConditions.BoundaryCondition} <: Terrarium.AbstractBoundaryConditions\n\nContainer type for an Oceananigans BoundaryCondition applied to prognostic (or closure) variable progvar.\n\nProperties:\n\ncondition::Oceananigans.BoundaryConditions.BoundaryCondition: Boundary condition\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.PrognosticVariable","page":"API Reference","title":"Terrarium.PrognosticVariable","text":"struct PrognosticVariable{VD<:Terrarium.VarDims, UT<:Unitful.Units, TV<:Union{Nothing, AuxiliaryVariable}, DT<:IntervalSets.AbstractInterval, CL<:Union{Nothing, Terrarium.AbstractClosureRelation}} <: Terrarium.AbstractVariable{VD<:Terrarium.VarDims}\n\nRepresents a prognostic variable with the given name and dims on the spatial grid.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.RichardsEq","page":"API Reference","title":"Terrarium.RichardsEq","text":"RichardsEq{PS} <: AbstractVerticalFlow\n\nOperator for soil hydrology corresponding to the Richardson-Richards equation for variably saturated flow in porous media.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.SoilBC","page":"API Reference","title":"Terrarium.SoilBC","text":"struct SoilBC{EnergyBC, WaterBC} <: Terrarium.AbstractBoundaryConditions\n\nBoundary condition type for soil models that provides boundary conditions for each of the relevant internal processes, i.e. energy, hydrology, ...\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.SoilComposition","page":"API Reference","title":"Terrarium.SoilComposition","text":"struct SoilComposition{NF} <: Terrarium.AbstractSoilComposition\n\nRepresents the material composition of an elementary volume of soil. The volume is decomposed into the key constitutents of water, ice, air, and a mixture of organic and mineral solid material. \n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.SoilEnergyBalance","page":"API Reference","title":"Terrarium.SoilEnergyBalance","text":"struct SoilEnergyBalance{NF, HeatOperator<:Terrarium.AbstractHeatOperator, FC<:FreezeCurves.FreezeCurve, ThermalProps<:(SoilThermalProperties{NF})} <: Terrarium.AbstractSoilEnergyBalance{NF}\n\nStandard implementation of the soil energy balance accounting for freezing and thawing of pore water/ice.\n\nProperties:\n\noperator::Terrarium.AbstractHeatOperator: Heat transport operator\nthermal_properties::SoilThermalProperties: Soil thermal properties\nfreezecurve::Val{FC} where FC<:FreezeCurves.FreezeCurve: Freeze curve type constructor\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.SoilHeatCapacities","page":"API Reference","title":"Terrarium.SoilHeatCapacities","text":"struct SoilHeatCapacities{NF}\n\nProperties:\n\nwater::Any\nice::Any\nair::Any\nmineral::Any\norganic::Any\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.SoilHydraulicsSURFEX","page":"API Reference","title":"Terrarium.SoilHydraulicsSURFEX","text":"struct SoilHydraulicsSURFEX{NF, UnsatK} <: Terrarium.AbstractSoilHydraulics{NF, UnsatK}\n\nSURFEX parameterization of mineral soil porosity (Masson et al. 2013).\n\nProperties:\n\ncond_unsat::Any: Unsaturated hydraulic conductivity formulation; defaults to cond_sat\ncond_sat::Any: Hydraulic conductivity at saturation [m/s]\nporosity::Any: Base porosity of soil without any sand [-]\nporosity_sand_coef::Any: Linear coeficient of porosity adjustment due to sand content [-]\nwilting_point_coef::Any: Linear coeficient of wilting point adjustment due to clay content [-]\nfield_capacity_coef::Any: Linear coeficient of field capacity adjustment due to clay content [-]\nfield_capacity_exp::Any: Exponent of field capacity adjustment due to clay content [-]\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.SoilHydrology","page":"API Reference","title":"Terrarium.SoilHydrology","text":"struct SoilHydrology{NF, VerticalFlow<:Terrarium.AbstractVerticalFlow, Runoff<:Terrarium.AbstractSoilRunoff, SoilET<:Union{Nothing, Terrarium.AbstractSoilET}, SoilHydraulics<:(Terrarium.AbstractSoilHydraulics{NF})} <: Terrarium.AbstractSoilHydrology{NF}\n\nProperties:\n\nvertflow::Terrarium.AbstractVerticalFlow: Soil water vertical flow operator\nrunoff::Terrarium.AbstractSoilRunoff: Soil subsurface runoff scheme\nevapotranspiration::Union{Nothing, Terrarium.AbstractSoilET}: Soil evapotranspiration scheme\nhydraulic_properties::Terrarium.AbstractSoilHydraulics: Soil hydraulic properties parameterization\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.SoilModel","page":"API Reference","title":"Terrarium.SoilModel","text":"struct SoilModel{NF, GridType<:(Terrarium.AbstractLandGrid{NF}), Stratigraphy<:Terrarium.AbstractStratigraphy, SoilEnergy<:Terrarium.AbstractSoilEnergyBalance, SoilHydrology<:Terrarium.AbstractSoilHydrology, Biogeochemistry<:Terrarium.AbstractSoilBiogeochemistry, Constants<:PhysicalConstants{NF}, BoundaryConditions<:Terrarium.AbstractBoundaryConditions, Initializer<:Terrarium.AbstractInitializer, TimeStepper<:Terrarium.AbstractTimeStepper} <: Terrarium.AbstractSoilModel{NF, GridType<:(Terrarium.AbstractLandGrid{NF}), TimeStepper<:Terrarium.AbstractTimeStepper}\n\nGeneral implementation of a 1D column model of soil energy, water, and carbon transport.\n\nProperties:\n\ngrid::Terrarium.AbstractLandGrid: Spatial grid type\nstrat::Terrarium.AbstractStratigraphy: Stratigraphy of the soil\nenergy::Terrarium.AbstractSoilEnergyBalance: Soil energy balance\nhydrology::Terrarium.AbstractSoilHydrology: Soil hydrology/water balance\nbiogeochem::Terrarium.AbstractSoilBiogeochemistry: Soil biogeochemistry\nconstants::PhysicalConstants: Physical constants\nboundary_conditions::Terrarium.AbstractBoundaryConditions: Boundary conditions\ninitializer::Terrarium.AbstractInitializer: State variable initializer\ntime_stepping::Terrarium.AbstractTimeStepper: Timestepping scheme\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.SoilRunoff","page":"API Reference","title":"Terrarium.SoilRunoff","text":"struct SoilRunoff{SR, IF, DR} <: Terrarium.AbstractSoilRunoff\n\nGeneric scheme for respresenting soil/subsurface runoff as a composition of three components: excess infiltration, interflow, and drainage.\n\nNot yet implemented.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.SoilTexture","page":"API Reference","title":"Terrarium.SoilTexture","text":"SoilTexture{NF}\n\nRepresents soil texture as a fractional mixture of sand, silt, and clay.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.SoilThermalConductivities","page":"API Reference","title":"Terrarium.SoilThermalConductivities","text":"struct SoilThermalConductivities{NF}\n\nProperties:\n\nwater::Any\nice::Any\nair::Any\nmineral::Any\norganic::Any\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.SoilThermalProperties","page":"API Reference","title":"Terrarium.SoilThermalProperties","text":"struct SoilThermalProperties{NF, CondWeighting}\n\nProperties:\n\ncond::SoilThermalConductivities: Thermal conductivities for all constituents\ncond_bulk::Any: Thermal conductivity mixing scheme\nheatcap::SoilHeatCapacities: Thermal conductivities for all constituents\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.StateVariables","page":"API Reference","title":"Terrarium.StateVariables","text":"struct StateVariables{prognames, tendnames, auxnames, inputnames, nsnames, closurenames, ProgFields, TendFields, AuxFields, InputFields, Namespaces, Closures, ClockType} <: Terrarium.AbstractStateVariables\n\nContainer type for all Fields corresponding to state variables defined by a model. StateVariables partitions the fields into three categories: prognostic, tendencies, and auxiliary. Prognostic variables are those which characterize the state of the system and are assigned tendencies to be integrated by the timestepper. Auxiliary fields are additional state variables derived from the prognostic state variables but which are conditionally independent of their values at the previous time step given the current prognostic state. It is worth noting that tendencies are also treated internally as auxiliary variables; however, they are assigned their own category here since they need to be handled separately by the timestepping scheme.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.TemperatureEnergyClosure","page":"API Reference","title":"Terrarium.TemperatureEnergyClosure","text":"TemperatureEnergyClosure\n\nDefines the constitutive relationship between temperature and the internal energy, U, of the system, i.e:\n\nU(T) = Ttimes C(T) - L_f theta_wi (1 - F(T))\n\nwhere T is temperature, C(T) is the temperature-dependent heat capacity, L_f is the volumetric latent heat of fusion, and F(T) is the constitutive relation between temperature and the unfrozen fraction of pore water. Note that this formulation implies that the zero\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.TracerGas","page":"API Reference","title":"Terrarium.TracerGas","text":"Generic type representing the concentration of a particular tracer gas in the atmosphere.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.TypeVal","page":"API Reference","title":"Terrarium.TypeVal","text":"Alias for Type{Val{x}}\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.UnsatKLinear","page":"API Reference","title":"Terrarium.UnsatKLinear","text":"struct UnsatKLinear{RetentionCurve<:FreezeCurves.SWRC} <: Terrarium.AbstractUnsatK\n\nSimple formulation of hydraulic conductivity as a linear function of the liquid water saturated fraction, i.e. soil.water / (soil.water + soil.ice + soil.air).\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.UnsatKVanGenuchten","page":"API Reference","title":"Terrarium.UnsatKVanGenuchten","text":"struct UnsatKVanGenuchten{NF, RetentionCurve<:FreezeCurves.VanGenuchten} <: Terrarium.AbstractUnsatK\n\nFormulation of hydraulic conductivity as a function of saturated hydraulic conductivity K_sat and volumetric fractions, assumed to include those of water, ice, and air.\n\nSee van Genuchten (1980) and Westermann et al. (2023).\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.Variables","page":"API Reference","title":"Terrarium.Variables","text":"struct Variables{ProgVars, TendVars, AuxVars, InputVars, Namespaces}\n\nContainer for abstract state variable definitions. Automatically sorts and merges all variables and namespaces passed into the constructor.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.VegetationModel","page":"API Reference","title":"Terrarium.VegetationModel","text":"struct VegetationModel{NF, Photosynthesis<:Terrarium.AbstractPhotosynthesis, StomatalConducatance<:Terrarium.AbstractStomatalConductance, AutotrophicRespiration<:Terrarium.AbstractAutotrophicRespiration, CarbonDynamics<:Terrarium.AbstractVegetationCarbonDynamics, VegetationDynamics<:Terrarium.AbstractVegetationDynamics, Phenology<:Terrarium.AbstractPhenology, GridType<:(Terrarium.AbstractLandGrid{NF}), Constants<:PhysicalConstants{NF}, BoundaryConditions<:Terrarium.AbstractBoundaryConditions, Initializer<:Terrarium.AbstractInitializer, TimeStepper<:Terrarium.AbstractTimeStepper} <: Terrarium.AbstractVegetationModel{NF, GridType<:(Terrarium.AbstractLandGrid{NF}), TimeStepper<:Terrarium.AbstractTimeStepper}\n\nModel for natural (unmanaged) vegetation processes for a single plant functional type (PFT). Multiple PFTs can be later handled with a TiledVegetationModel type that composes multiple VegetationModels with different parameters for each PFT.\n\nProperties:\n\ngrid::Terrarium.AbstractLandGrid: Spatial grid type\nphotosynthesis::Terrarium.AbstractPhotosynthesis: Photosynthesis scheme\nstomatal_conductance::Terrarium.AbstractStomatalConductance: Stomatal conducantance scheme\nautotrophic_respiration::Terrarium.AbstractAutotrophicRespiration: Autotrophic respiration scheme\nphenology::Terrarium.AbstractPhenology: Phenology scheme\ncarbon_dynamics::Terrarium.AbstractVegetationCarbonDynamics: Vegetation carbon pool dynamics\nvegetation_dynamics::Terrarium.AbstractVegetationDynamics: Vegetation population density or coverage fraction dynamics\nconstants::PhysicalConstants: Physical constants\nboundary_conditions::Terrarium.AbstractBoundaryConditions: Boundary conditions\ninitializer::Terrarium.AbstractInitializer: State variable initializer\ntime_stepping::Terrarium.AbstractTimeStepper: Timestepping scheme\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.XY","page":"API Reference","title":"Terrarium.XY","text":"XY <: VarDims\n\nIndicator type for variables that should be assigned a 2D (lateral only) field on their associated grid.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Terrarium.XYZ","page":"API Reference","title":"Terrarium.XYZ","text":"XYZ <: VarDims\n\nIndicator type for variables that should be assigned a 3D field on their associated grid.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Oceananigans.BoundaryConditions.getbc-Union{Tuple{units}, Tuple{name}, Tuple{Input{name, units, <:XY}, Integer, Integer, Oceananigans.Grids.AbstractGrid, Any, Any}} where {name, units}","page":"API Reference","title":"Oceananigans.BoundaryConditions.getbc","text":"Implementation of Oceananigans.BoundaryConditions.getbc for Input{name} placeholders that retrieves the input Field from state.inputs and returns the value at the given index.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Oceananigans.Simulations.run!-Tuple{ModelState}","page":"API Reference","title":"Oceananigans.Simulations.run!","text":"run!(state; steps, period, Œît)\n\n\nRun the simulation by steps or a period with Œît timestep size (in seconds or Dates.Period).\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.AmbientCO2-Tuple{}","page":"API Reference","title":"Terrarium.AmbientCO2","text":"Creates a TracerGas for ambient CO2 with a prescribed concentration conc.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.ConstantInitialSoilTemperature-Tuple{Any}","page":"API Reference","title":"Terrarium.ConstantInitialSoilTemperature","text":"Creates a constant soil temperature initializer.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.FreeDrainage-Union{Tuple{Type{NF}}, Tuple{NF}} where NF","page":"API Reference","title":"Terrarium.FreeDrainage","text":"Alias for PrescribedGradient representing a Neumann-type zero pressure gradient at the bottom of the soil column, thereby allowing free drainage of water.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.GeothermalHeatFlux-Tuple{Any}","page":"API Reference","title":"Terrarium.GeothermalHeatFlux","text":"Alias for PrescribedFlux with name Q_geo representing the geothermal heat flux at the bottom boundary of the soil column.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.GroundHeatFlux-Tuple{Any}","page":"API Reference","title":"Terrarium.GroundHeatFlux","text":"Alias for PrescribedFlux with name Q_g representing the net ground heat flux at the soil surface.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.ImpermeableBoundary-Tuple{}","page":"API Reference","title":"Terrarium.ImpermeableBoundary","text":"Alias for NoFlux representing a zero-flux boundary condition for water flow (prognostic variable saturation_water_ice).\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.InfiltrationFlux-Tuple{Any}","page":"API Reference","title":"Terrarium.InfiltrationFlux","text":"Alias for PrescribedFlux with name Q_inf representing liquid water infiltration at the soil surface.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.PiecewiseLinearInitialSoilTemperature-Tuple{Vararg{Pair{<:Unitful.Quantity{NF, ùêã, U} where {NF, U<:Unitful.Units}}}}","page":"API Reference","title":"Terrarium.PiecewiseLinearInitialSoilTemperature","text":"Creates a piecwise linear temperature initializer from the given knots.\n\ninitializer = PiecewiseLinearInitialSoilTemperature(\n    0.0u\"m\" => 5.0, # always in ¬∞C!\n    0.5u\"m\" => 2.0,\n    1.0u\"m\" => 1.0,\n    10.0u\"m\" => 1.5,\n    ...\n)\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.QuasiThermalSteadyState-Tuple{Any, Any, Any}","page":"API Reference","title":"Terrarium.QuasiThermalSteadyState","text":"Computes a linear temperature profile in quasi-steady state based on the given surface temperature, geothermal heat flux, and bulk thermal conductivity.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.SoilBoundaryConditions-Union{Tuple{Type{NF}}, Tuple{NF}} where NF","page":"API Reference","title":"Terrarium.SoilBoundaryConditions","text":"Alias for ColumnBoundaryConditions with defaults suitable for SoilModels.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.TracerGases-Tuple{Vararg{TracerGas}}","page":"API Reference","title":"Terrarium.TracerGases","text":"Creates a NamedTuple from the given tracer gas types.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.adjust_saturation_profile!-Tuple{Any}","page":"API Reference","title":"Terrarium.adjust_saturation_profile!","text":"adjust_saturation_profile!(\n    state,\n    grid,\n    ::SoilHydrology{NF}\n)\n\nKernel for adjusting saturation profiles to account for oversaturation due to numerical error. This implementation scans over the saturation profiles at each lateral grid cell and redistributes excess water upward layer-by-layer until reaching the topmost layer, where any remaining excess water is added to the surface_excess_water pool.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.auxiliary-Tuple{Symbol, Terrarium.VarDims}","page":"API Reference","title":"Terrarium.auxiliary","text":"auxiliary(name, dims; units, domain, desc)\n\n\nConvenience constructor method for AuxiliaryVariable.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.closurevar","page":"API Reference","title":"Terrarium.closurevar","text":"closurevar(::AbstractClosureRelation)\n\nReturn an AuxiliaryVariable corresponding to the closure variable defined by the given closure relation.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Terrarium.compute_APAR-Union{Tuple{NF}, Tuple{LUEPhotosynthesis{NF}, NF, NF}} where NF","page":"API Reference","title":"Terrarium.compute_APAR","text":"compute_APAR(photo, swdown, LAI)\n\n\nComputes absorbed PAR limited by the fraction of PAR assimilated at ecosystem level APAR [mol/m¬≤/day], Eq. 62, PALADYN (Willeit 2016).\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.compute_Ag-Union{Tuple{NF}, Tuple{LUEPhotosynthesis{NF}, Vararg{NF, 5}}} where NF","page":"API Reference","title":"Terrarium.compute_Ag","text":"compute_Ag(photo, c_1, c_2, APAR, Vc_max, Œ≤)\n\n\nComputes the daily gross photosynthesis Ag [gC/m¬≤/day], Eqn 2, Haxeltine & Prentice 1996\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.compute_And-Union{Tuple{NF}, Tuple{LUEPhotosynthesis, Vararg{NF, 6}}} where NF","page":"API Reference","title":"Terrarium.compute_And","text":"compute_And(photo, c_1, c_2, APAR, Vc_max, Œ≤, Rd)\n\n\nComputes the total daytime net photosynthesis And [gC/m¬≤/day], Eqn 19, Haxeltine & Prentice 1996 + Eq. 65, PALADYN (Willeit 2016).\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.compute_C_veg_tend-Union{Tuple{NF}, Tuple{PALADYNCarbonDynamics{NF}, NF, NF}} where NF","page":"API Reference","title":"Terrarium.compute_C_veg_tend","text":"compute_C_veg_tend(vegcarbon_dynamics, LAI_b, NPP)\n\n\nComputes the C_veg tendency based on NPP and the balanced Leaf Area Index LAI_b, Eq. 72, PALADYN (Willeit 2016) \n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.compute_JE_JC-Union{Tuple{NF}, Tuple{LUEPhotosynthesis{NF}, Vararg{NF, 4}}} where NF","page":"API Reference","title":"Terrarium.compute_JE_JC","text":"compute_JE_JC(photo, c_1, c_2, APAR, Vc_max)\n\n\nComputes the PAR-limited and the rubisco-activity-limited photosynthesis rates JE and JC [gC/m¬≤/day], Eqn 3+5, Haxeltine & Prentice 1996.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.compute_LAI-Union{Tuple{NF}, Tuple{PALADYNPhenology{NF}, NF}} where NF","page":"API Reference","title":"Terrarium.compute_LAI","text":"compute_LAI(phenol, LAI_b)\n\n\nComputes LAI, based on the balanced Leaf Area Index LAI_b:\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.compute_NPP-Tuple{PALADYNAutotrophicRespiration, Any, Any}","page":"API Reference","title":"Terrarium.compute_NPP","text":"compute_NPP(autoresp, GPP, Ra)\n\n\nComputes Net Primary Productivity NPP as the difference between Gross Primary Production GPP and autotrophic respiration Ra in [kgC/m¬≤/day].\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.compute_PAR-Union{Tuple{NF}, Tuple{LUEPhotosynthesis{NF}, NF}} where NF","page":"API Reference","title":"Terrarium.compute_PAR","text":"compute_PAR(photo, swdown)\n\n\nComputes NET Photosynthetically Active Radiation PAR [mol/m¬≤/day].\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.compute_Ra-Tuple{PALADYNAutotrophicRespiration, PALADYNCarbonDynamics, Vararg{Any, 5}}","page":"API Reference","title":"Terrarium.compute_Ra","text":"compute_Ra(\n    autoresp,\n    vegcarbon_dynamics,\n    T_air,\n    Rd,\n    phen,\n    C_veg,\n    GPP\n)\n\n\nComputes autotrophic respiration Ra as the sum of maintenance respiration Rm and growth respiration Rg in [kgC/m¬≤/day].\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.compute_Rd-Tuple{LUEPhotosynthesis, Any, Any}","page":"API Reference","title":"Terrarium.compute_Rd","text":"compute_Rd(photo, Vc_max, Œ≤)\n\n\nComputes the daily leaf respiration Rd [gC/m¬≤/day], Eqn 10, Haxeltine & Prentice 1996 and Eq. 10 PALADYN (Willeit 2016).\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.compute_Rg-Union{Tuple{NF}, Tuple{PALADYNAutotrophicRespiration{NF}, Any, Any}} where NF","page":"API Reference","title":"Terrarium.compute_Rg","text":"compute_Rg(autoresp, GPP, Rm)\n\n\nComputes growth respiration Rg in [kgC/m¬≤/day].\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.compute_Rm-Union{Tuple{NF}, Tuple{PALADYNAutotrophicRespiration{NF}, PALADYNCarbonDynamics{NF}, Vararg{Any, 4}}} where NF","page":"API Reference","title":"Terrarium.compute_Rm","text":"compute_Rm(\n    autoresp,\n    vegcarbon_dynamics,\n    T_air,\n    Rd,\n    phen,\n    C_veg\n)\n\n\nComputes maintenance respiration Rm in [kgC/m¬≤/day].\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.compute_Vc_max-Union{Tuple{NF}, Tuple{LUEPhotosynthesis{NF}, Vararg{NF, 7}}} where NF","page":"API Reference","title":"Terrarium.compute_Vc_max","text":"compute_Vc_max(\n    photo,\n    c_1,\n    APAR,\n    Kc,\n    Ko,\n    Œì_star,\n    pres_i,\n    pres_O2\n)\n\n\nComputes the maximum daily rate of net photosynthesis Vc_max [gC/m¬≤/day], following the coordination hypothesis (acclimation), see Harrison 2021 Box 2. Note: this is not the same formula in PALADYN paper, this implementaion is taken from the code\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.compute_auxiliary!","page":"API Reference","title":"Terrarium.compute_auxiliary!","text":"compute_auxiliary!(state, model::AbstractModel)\n\nComputes updates to all auxiliary variables based on the current prognostic state of the model.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Terrarium.compute_auxiliary!-Tuple{Any, Any, Terrarium.AbstractBoundaryConditions}","page":"API Reference","title":"Terrarium.compute_auxiliary!","text":"Updates any state variables associated with the given boundary conditions.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.compute_c1_c2-Union{Tuple{NF}, Tuple{LUEPhotosynthesis{NF}, Vararg{NF, 6}}} where NF","page":"API Reference","title":"Terrarium.compute_c1_c2","text":"compute_c1_c2(photo, T_air, Œì_star, Kc, Ko, pres_i, pres_O2)\n\n\nComputes factor for light-limited assimilation c_1 and factor for RuBisCO-limited assimilation c_2, Eqs. C4+C5, PALADYN (Willeit 2016).\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.compute_f_deciduous-Union{Tuple{PALADYNPhenology{NF}}, Tuple{NF}} where NF","page":"API Reference","title":"Terrarium.compute_f_deciduous","text":"compute_f_deciduous(phenol)\n\n\nComputes f_deciduous, a factor for smooth transition between evergreen and deciduous [-].\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.compute_hydraulic_conductivity!-Tuple{Any}","page":"API Reference","title":"Terrarium.compute_hydraulic_conductivity!","text":"compute_hydraulic_conductivity!(\n    state,\n    grid,\n    hydrology::SoilHydrology,\n    strat::AbstractStratigraphy,\n    bgc::AbstractSoilBiogeochemistry,\n)\n\nKernel for computing the hydraulic conductivity in all grid cells and soil layers.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.compute_phen-Union{Tuple{PALADYNPhenology{NF}}, Tuple{NF}} where NF","page":"API Reference","title":"Terrarium.compute_phen","text":"compute_phen(phenol)\n\n\nComputes phen, the phenology factor [-].\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.compute_photosynthesis-Union{Tuple{NF}, Tuple{LUEPhotosynthesis{NF}, Vararg{NF, 6}}} where NF","page":"API Reference","title":"Terrarium.compute_photosynthesis","text":"compute_photosynthesis(\n    photo,\n    T_air,\n    swdown,\n    pres,\n    co2,\n    LAI,\n    Œªc\n)\n\n\nComputes Gross Primary Production GPPin [kgC/m¬≤/day] and leaf respiration Rd in [gC/m¬≤/day]\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.compute_pres_i-Tuple{LUEPhotosynthesis, Any, Any}","page":"API Reference","title":"Terrarium.compute_pres_i","text":"compute_pres_i(photo, Œªc, pres_a)\n\n\nComputes intercellular CO2 partial pressure [Pa], Eq. 67, PALADYN (Willeit 2016).\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.compute_resp10-Union{Tuple{PALADYNAutotrophicRespiration{NF}}, Tuple{NF}} where NF","page":"API Reference","title":"Terrarium.compute_resp10","text":"compute_resp10(autoresp)\n\n\nComputes resp10 \n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.compute_saturation_tendency!-Tuple{Any}","page":"API Reference","title":"Terrarium.compute_saturation_tendency!","text":"compute_saturation_tendency!(\n    state,\n    grid,\n    hydrology::SoilHydrology,\n    strat::AbstractStratigraphy,\n    bgc::AbstractSoilBiogeochemistry,\n)\n\nKernel for computing the tendency of the prognostic saturation_water_ice variable in all grid cells and soil layers.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.compute_tendencies!","page":"API Reference","title":"Terrarium.compute_tendencies!","text":"compute_tendencies!(state, model::AbstractModel)\n\nComputes tendencies for all prognostic state variables for model stored in the given state. This method should be called after compute_auxiliary!.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Terrarium.compute_tendencies!-Tuple{Any, Any, Terrarium.AbstractBoundaryConditions}","page":"API Reference","title":"Terrarium.compute_tendencies!","text":"Computes any tendency contributions from the given boundary conditions.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.compute_vpd-Union{Tuple{NF}, Tuple{NF, NF, NF}} where NF","page":"API Reference","title":"Terrarium.compute_vpd","text":"compute_vpd(T_air, q_air, pres)\n\n\nComputes the vapor pressure deficit from air temperature, specific humidity, and surface pressure.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.compute_water_table!-Tuple{Any}","page":"API Reference","title":"Terrarium.compute_water_table!","text":"compute_water_table!(\n    state,\n    grid,\n    ::SoilHydrology{NF}\n) where {NF}\n\nKernel for diagnosing the water table at each grid point given the current soil saturation state.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.compute_Œì_star-Union{Tuple{NF}, Tuple{LUEPhotosynthesis{NF}, NF, NF}} where NF","page":"API Reference","title":"Terrarium.compute_Œì_star","text":"compute_Œì_star(photo, œÑ, pres_O2)\n\n\nComputes the CO2 compensation point Œì_star, Eq. C6, PALADYN (Willeit 2016).\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.compute_Œõ_loc-Union{Tuple{NF}, Tuple{PALADYNCarbonDynamics{NF}, Any}} where NF","page":"API Reference","title":"Terrarium.compute_Œõ_loc","text":"compute_Œõ_loc(vegcarbon_dynamics, LAI_b)\n\n\nComputes the local litterfall rate Œõ_loc based on the balanced Leaf Area Index LAI_b (assuming evergreen PFTs), Eq. 75, PALADYN (Willeit 2016).\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.compute_Œ≤-Union{Tuple{LUEPhotosynthesis{NF}}, Tuple{NF}} where NF","page":"API Reference","title":"Terrarium.compute_Œ≤","text":"compute_Œ≤(photo)\n\n\nComputes the soil-moisture limiting factor Œ≤, Eq. 66, PALADYN (Willeit 2016).\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.compute_Œ≥v-Tuple{PALADYNVegetationDynamics}","page":"API Reference","title":"Terrarium.compute_Œ≥v","text":"compute_Œ≥v(veg_dynamics)\n\n\nComputes the disturbance rateŒ≥v, Eq. 80, PALADYN (Willeit 2016).\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.compute_Œª_NPP-Union{Tuple{NF}, Tuple{PALADYNCarbonDynamics{NF}, Any}} where NF","page":"API Reference","title":"Terrarium.compute_Œª_NPP","text":"compute_Œª_NPP(vegcarbon_dynamics, LAI_b)\n\n\nComputes Œª_NPP,a factor determining the partitioning of NPP between increase of vegetation carbon of the existing  vegetated area and spreading of the given PFT based on the balanced Leaf Area Index LAI_b, Eq. 74, PALADYN (Willeit 2016).\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.compute_Œªc-Union{Tuple{NF}, Tuple{MedlynStomatalConductance{NF}, Any}} where NF","page":"API Reference","title":"Terrarium.compute_Œªc","text":"compute_Œªc(stomcond, vpd)\n\n\nComputes the ratio of leaf-internal and air CO2 concentration Œªc,  derived from the optimal stomatal conductance model (Medlyn et al. 2011), Eq. 71, PALADYN (Willeit 2016).\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.compute_ŒΩ_star-Tuple{PALADYNVegetationDynamics, Any}","page":"API Reference","title":"Terrarium.compute_ŒΩ_star","text":"compute_ŒΩ_star(veg_dynamics, ŒΩ)\n\n\nComputes ŒΩ_star which is the maximum between the current vegetation fraction ŒΩ and the seed fraction ŒΩ_seed [-], to ensure that a PFT is always seeded.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.compute_ŒΩ_tend-Union{Tuple{NF}, Tuple{PALADYNVegetationDynamics, PALADYNCarbonDynamics{NF}, NF, NF, NF}} where NF","page":"API Reference","title":"Terrarium.compute_ŒΩ_tend","text":"compute_ŒΩ_tend(\n    veg_dynamics,\n    vegcarbon_dynamics,\n    LAI_b,\n    C_veg,\n    ŒΩ\n)\n\n\nComputes the vegetation fraction tendency for a single PFT, Eq. 73, PALADYN (Willeit 2016).\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.convert_dt-Tuple{Number}","page":"API Reference","title":"Terrarium.convert_dt","text":"convert_dt(Œît)\n\n\nConvert Œîts of type Period to a numeric value in seconds. Return Œît if already a number.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.default_dt","page":"API Reference","title":"Terrarium.default_dt","text":"default_dt(timestepper::AbstractTimeStepper)\n\nGet the current timestep size for the time stepper.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Terrarium.energy_to_temperature-Union{Tuple{NF}, Tuple{FreezeCurves.FreeWater, NF, NF, NF}} where NF","page":"API Reference","title":"Terrarium.energy_to_temperature","text":"Calculate the inverse enthalpy function given the internal energy, latent heat content, and heat capacity under the free water freezing characteristic.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.explicit_step!-Tuple{Any, Terrarium.AbstractLandGrid, Terrarium.AbstractTimeStepper, Any}","page":"API Reference","title":"Terrarium.explicit_step!","text":"explicit_step!(state, grid, timestepper, Œît)\n\n\nEvaluate an explicit update u += ‚àÇu‚àÇt*Œît for all prognostic fields and their corresponding tendencies. By default, this is implemented as a simple Euler update u += dudt*Œît which can serve as a building block for more complex, multi-stage timesteppers. Where necessary, additional dispatches of explicit_step_kernel!(field, tendency, ::AbstractLandGrid, ::TimeStepper, Œît) can be defined to implement more specialized time-stepping schemes.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.explicit_step!-Union{Tuple{LZ}, Tuple{LY}, Tuple{LX}, Tuple{Oceananigans.Fields.AbstractField{LX, LY, LZ}, Oceananigans.Fields.AbstractField{LX, LY, LZ}, Terrarium.AbstractLandGrid, Terrarium.AbstractTimeStepper, Any, Vararg{Any}}} where {LX, LY, LZ}","page":"API Reference","title":"Terrarium.explicit_step!","text":"Accumulate tendency*Œît in the given prognostic field. This method can be overridden by specialized timestepping schemes as needed.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.fastiterate-Union{Tuple{N}, Tuple{F}, Tuple{F, Vararg{Tuple{Vararg{Any, N}}}}} where {F, N}","page":"API Reference","title":"Terrarium.fastiterate","text":"fastiterate(f!::F, iters::NTuple{N,Any}...) where {F,N}\n\nSame as fastmap but simply invokes f! on each argument set without constructing a tuple.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.fastmap-Union{Tuple{F}, Tuple{F, Vararg{NamedTuple}}} where F","page":"API Reference","title":"Terrarium.fastmap","text":"fastmap(f::F, iter::NamedTuple...) where {F}\n\nSame as map for NamedTuples but with guaranteed type stability. fastmap is a @generated function which unrolls calls to f into a loop-free tuple construction expression. All named tuples must have the same keys but in no particular order. The returned NamedTuple \n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.fastmap-Union{Tuple{N}, Tuple{F}, Tuple{F, Vararg{Tuple{Vararg{Any, N}}}}} where {F, N}","page":"API Reference","title":"Terrarium.fastmap","text":"fastmap(f::F, iter::NTuple{N,Any}...) where {F,N}\n\nSame as map for NTuples but with guaranteed type stability. fastmap is a @generated function which unrolls calls to f into a loop-free tuple construction expression.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.field_capacity","page":"API Reference","title":"Terrarium.field_capacity","text":"Compute the empirical field capacity of the soil.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Terrarium.findfirst_z-NTuple{4, Any}","page":"API Reference","title":"Terrarium.findfirst_z","text":"findfirst_z(idx, condition_func, z_nodes, field)\n\n2D kernel function that finds the first coordinate in z_nodes where condition_func(field[i, j, k]). This implementation performs a linear scan over the z-axis and thus has time complexity O(N_z).\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.get_boundary_conditions-Tuple{Terrarium.AbstractModel}","page":"API Reference","title":"Terrarium.get_boundary_conditions","text":"get_boundary_conditions(model::AbstractModel)::AbstractBoundaryConditions\n\nReturns the boundary conditions associated with this model.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.get_closure-Tuple{Terrarium.AbstractOperator}","page":"API Reference","title":"Terrarium.get_closure","text":"get_closure(op::AbstractOperator)\n\nReturns an AbstractClosureRelation for the given differential operator. Deefaults to returning nothing (i.e. no closure).\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.get_field_boundary_conditions-Tuple{Terrarium.AbstractBoundaryConditions, Terrarium.AbstractLandGrid}","page":"API Reference","title":"Terrarium.get_field_boundary_conditions","text":"get_field_boundary_conditions(_, grid)\n\n\nConstructs a suitable Oceananigans BoundaryCondition for the given state variable var on grid. If bcs is a NamedTuple, it is assumed that the keys correspond to variable names and this method is invoked recursively on the entry matching the name of var, if it exists. Otherwise, nothing is returned.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.get_field_grid","page":"API Reference","title":"Terrarium.get_field_grid","text":"get_field_grid(grid::AbstractLandGrid)::Oceananigans.AbstractGrid\n\nReturns the underlying Oceananigans grid type for Fields defined on the given land grid.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Terrarium.get_field_initializers-Tuple{FieldInitializers}","page":"API Reference","title":"Terrarium.get_field_initializers","text":"Returns the field initializers stored in init.vars merged with the field initializers defined by the inner initializer. The field initilaizers defined by the given FieldInitializers take precedence in the merge.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.get_field_initializers-Tuple{Terrarium.AbstractInitializer}","page":"API Reference","title":"Terrarium.get_field_initializers","text":"get_field_initializers(_)\n\n\nReturns a named tuple of Oceananigans Field initializer functions where the keys correspond to the names of the respective state variables.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.get_fields-Tuple{StateVariables, Vararg{Union{Symbol, Pair}}}","page":"API Reference","title":"Terrarium.get_fields","text":"get_fields(state::StateVariables, queries::Union{Symbol, Pair}...)\n\nRetrieves fields with names given in queries and returns them in a NamedTuple. Each argument in queries can either be a Symbol corresponding to a field/variable defined in the namespace of state or a Pair{Symbol, Tuple} where the key is the child namespace and the value is a tuple of queries from that namespace.\n\n# initialize model\nstate = initialize(model)\n# get the temperature and saturation_water_ice fields\nfields = get_fields(state, :temperature, :saturation_water_ice)\n# extract temperature as well as variables from a namespace\nnested_fields = get_fields(state, :temperature, :namespace => (:subvar1, :subvar2))\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.get_grid-Tuple{Terrarium.AbstractModel}","page":"API Reference","title":"Terrarium.get_grid","text":"get_grid(model::AbstractModel)::AbstractLandGrid\n\nReturn the spatial grid associated with this model.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.get_initializer-Tuple{Terrarium.AbstractModel}","page":"API Reference","title":"Terrarium.get_initializer","text":"get_initializer(model::AbstractModel)::AbstractInitializer\n\nReturns the initializer associated with this model.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.get_npoints-Tuple{Terrarium.AbstractVerticalSpacing}","page":"API Reference","title":"Terrarium.get_npoints","text":"get_npoints(spacing)\n\n\nReturn the number of vertical layers defined by this discretization.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.get_spacing-Tuple{Terrarium.AbstractVerticalSpacing}","page":"API Reference","title":"Terrarium.get_spacing","text":"get_spacing(spacing)\n\n\nReturn a Vector of vertical layer thicknesses according to the given discretization.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.get_swrc","page":"API Reference","title":"Terrarium.get_swrc","text":"get_swrc(::AbstractUnsatK)\n\nReturn the soil water retention curve associated with the given unsaturated hydraulic conductivity scheme.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Terrarium.get_swrc-Tuple{SoilHydrology}","page":"API Reference","title":"Terrarium.get_swrc","text":"get_swrc(hydrology::SoilHydrology)\n\nReturn the soil water retention curve from the hydraulic_properties associated with the given SoilHydrology configuration.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.get_time_stepping-Tuple{Terrarium.AbstractModel}","page":"API Reference","title":"Terrarium.get_time_stepping","text":"get_time_stepping(model::AbstractModel)::AbstractTimeStepper\n\nReturns the time stepping scheme associated with this model.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.heatcapacity-Tuple{SoilThermalProperties, SoilComposition}","page":"API Reference","title":"Terrarium.heatcapacity","text":"heatcapacity(props, soil)\n\n\nCompute the bulk heat capacity of the given soil volume.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.hydraulic_conductivity","page":"API Reference","title":"Terrarium.hydraulic_conductivity","text":"Compute (variably saturated) hydraulic conductivity based on the given hydraulic properties, soil water retention curve (SWRC), and volumetric fractions.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Terrarium.initialize!","page":"API Reference","title":"Terrarium.initialize!","text":"initialize!(state, model::AbstractModel)\ninitialize!(state, model::AbstractModel, initializer::AbstractInitializer)\n\nCalls initialize! on the model and its corresponding initializer. This method only needs to be implemented if initialization routines are necessary in addition to direct field/variable initializers.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Terrarium.initialize!-Tuple{ModelState}","page":"API Reference","title":"Terrarium.initialize!","text":"Resets the simulation clock and calls initialize!(state, model) on the underlying model which should reset all state variables to their values as defiend by the model initializer.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.initialize!-Union{Tuple{names}, Tuple{Any, NamedTuple{names}}} where names","page":"API Reference","title":"Terrarium.initialize!","text":"\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.initialize-Tuple{Terrarium.AbstractTimeStepper, Any, Any, Any}","page":"API Reference","title":"Terrarium.initialize","text":"initialize(::AbstractTimeStepper, prognostic_fields, closure_fields, tendencies) where {NF}\n\nInitialize and return the time stepping state cache for the given time stepper.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.initialize-Union{Tuple{NF}, Tuple{Terrarium.AbstractModel{NF, Grid} where Grid<:(Terrarium.AbstractLandGrid{NF}), InputProvider}} where NF","page":"API Reference","title":"Terrarium.initialize","text":"Creates and initializes a ModelState for the given model with the given clock state. This method allocates all necessary Fields for the state variables and calls initialize!(::ModelState). Note that this method is not type stable and should not be called in an Enzyme autodiff call.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.input-Tuple{Symbol, Terrarium.VarDims}","page":"API Reference","title":"Terrarium.input","text":"input(name, dims; units, desc)\n\n\nConvenience constructor method for InputVariable.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.is_adaptive","page":"API Reference","title":"Terrarium.is_adaptive","text":"is_adaptive(timestepper::AbstractTimeStepper)\n\nReturn true if the given time stepper is adaptive, false otherwise.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Terrarium.liquid_water_fraction-Union{Tuple{NF}, Tuple{FreezeCurves.FreeWater, NF, NF, NF}} where NF","page":"API Reference","title":"Terrarium.liquid_water_fraction","text":"Calculate the unfrozen water content from the given internal energy, latent heat content, and saturation.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.merge_duplicates-Tuple{Tuple}","page":"API Reference","title":"Terrarium.merge_duplicates","text":"merge_duplicates(values)\n\n\nFilter out duplicates from the given tuple. Note that this method is not type stable or allocation-free!\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.merge_recursive-Tuple{NamedTuple, NamedTuple, Vararg{Any}}","page":"API Reference","title":"Terrarium.merge_recursive","text":"merge_recursive(nt1::NamedTuple, nt2::NamedTuple)\n\nRecursively merge two nested named tuples. This implementation is loosely based on the one in NamedTupleTools authored by Jeffrey Sarnoff.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.mineral_porosity","page":"API Reference","title":"Terrarium.mineral_porosity","text":"Compute the natural porosity of the mineral soil constitutents, i.e. excluding organic material.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Terrarium.namespace-Tuple{Symbol, Terrarium.Variables}","page":"API Reference","title":"Terrarium.namespace","text":"namespace(name, vars)\n\n\nConvenience constructor method for variable Namespaces.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.organic_fraction-Tuple{Any, Any, ConstantSoilCarbonDenisty}","page":"API Reference","title":"Terrarium.organic_fraction","text":"organic_fraction(idx, state, bgc::ConstantSoilCarbonDenisty)\n\nCalculate the organic solid fraction at the given idx based on the prescribed SOC and natural porosity/density of the organic material.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.organic_porosity-Tuple{Any, Any, ConstantSoilCarbonDenisty}","page":"API Reference","title":"Terrarium.organic_porosity","text":"organic_porosity(idx, state, bgc::ConstantSoilCarbonDenisty)\n\nGet the prescribed natural porosity of organic soil.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.partial_pressure_CO2-Union{Tuple{NF}, Tuple{NF, NF}} where NF","page":"API Reference","title":"Terrarium.partial_pressure_CO2","text":"partial_pressure_CO2(pres, conc_co2)\n\n\nCompute partial pressure of CO2 from surface pressure and CO2 concentration in Pa.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.partial_pressure_O2-Tuple{NF} where NF","page":"API Reference","title":"Terrarium.partial_pressure_O2","text":"partial_pressure_O2(pres)\n\n\nCompute partial pressure of oxygen from surface pressure in Pa.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.piecewise_linear-Tuple{Vararg{Pair{<:Unitful.Quantity{NF, ùêã, U} where {NF, U<:Unitful.Units}}}}","page":"API Reference","title":"Terrarium.piecewise_linear","text":"piecewise_linear(knots; extrapolation)\n\n\nReturn a function f(z) that linearly interpolates between the given knots.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.porosity-Tuple{Any, Any, SoilHydrology, Terrarium.AbstractStratigraphy, Terrarium.AbstractSoilBiogeochemistry}","page":"API Reference","title":"Terrarium.porosity","text":"porosity(idx, state, hydrology::SoilHydrology, strat::AbstractStratigraphy, bgc::AbstractSoilBiogeochemistry)\n\nReturn the porosity of the soil volume at idx given the current state, hydrology, stratigraphy, and biogeochemistry configurations.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.prognostic","page":"API Reference","title":"Terrarium.prognostic","text":"prognostic(name, dims; ...)\nprognostic(name, dims, closure; units, domain, desc)\n\n\nConvenience constructors for PrognosticVariable.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Terrarium.safediv-Union{Tuple{NF}, Tuple{NF, NF}} where NF","page":"API Reference","title":"Terrarium.safediv","text":"safediv(x, y)\n\n\nEvaluates x / (y + eps(NF)) if and only if y != zero(y); returns Inf otherwise.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.saturated_hydraulic_conductivity","page":"API Reference","title":"Terrarium.saturated_hydraulic_conductivity","text":"Compute hydraulic conductivity at saturation.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Terrarium.soil_composition-Tuple{Any, Any, HomogeneousSoil, Terrarium.AbstractSoilHydrology, Terrarium.AbstractSoilBiogeochemistry}","page":"API Reference","title":"Terrarium.soil_composition","text":"Compute and return a SoilComposition summarizing the material composition of the soil volume at index idx.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.tendency-Tuple{Symbol, Terrarium.VarDims, Unitful.Units}","page":"API Reference","title":"Terrarium.tendency","text":"tendency(progname, progdims, progunits)\n\n\nCreates an AuxiliaryVariable for the tendency of a prognostic variable with the given name, dimensions, and physical units. This constructor is primarily used internally by other constructors and does not usually need to be called by implementations of variables.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.thermalconductivity-Tuple{SoilThermalProperties, SoilComposition}","page":"API Reference","title":"Terrarium.thermalconductivity","text":"thermalconductivity(props, soil)\n\n\nCompute the bulk thermal conductivity of the given soil volume.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.timestep!","page":"API Reference","title":"Terrarium.timestep!","text":"timestep!(state, model::AbstractModel, timestepper::AbstractTimeStepper, Œît)\n\nAdvance the model state by one time step, or by Œît units of time.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Terrarium.timestep!-Tuple{Any, Terrarium.AbstractModel, Any}","page":"API Reference","title":"Terrarium.timestep!","text":"Convenience dispatch for timestep! that forwards to timestep!(state, model, get_time_stepping(model), Œît).\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.timestep!-Tuple{ModelState}","page":"API Reference","title":"Terrarium.timestep!","text":"timestep!(state; finalize)\n\n\nAdvance the model forward by one timestep with optional timestep size Œît.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.tuplejoin-Tuple{}","page":"API Reference","title":"Terrarium.tuplejoin","text":"tuplejoin()\n\n\nConcatenate one or more tuples together.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.update_inputs!-Tuple{InputFields, InputSource, Clock}","page":"API Reference","title":"Terrarium.update_inputs!","text":"update_inputs!(_, _, _)\n\n\nUpdates the values of input variables stored in fields from the given input source. Default implementation simply returns nothing.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.vardims-Tuple{Terrarium.AbstractVariable}","page":"API Reference","title":"Terrarium.vardims","text":"vardims(var)\n\n\nRetrieve the grid dimensions on which this variable is defined.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.vardims-Union{Tuple{Oceananigans.Fields.AbstractField{LX, LY, Nothing}}, Tuple{LY}, Tuple{LX}} where {LX, LY}","page":"API Reference","title":"Terrarium.vardims","text":"vardims(_)\n\n\nInfer the appropriate VarDims from the given Field.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.variables","page":"API Reference","title":"Terrarium.variables","text":"variables(model::AbstractModel)\n\nReturn a Tuple of AbstractVariables (i.e. PrognosticVariable, AuxiliaryVariable, etc.) defined by the model. For models that consist of one or more sub-models, variables may optionally be grouped into namespaces by returning a NamedTuple where the keys correspond to the group names.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Terrarium.variables-Tuple{Terrarium.AbstractBoundaryConditions}","page":"API Reference","title":"Terrarium.variables","text":"Like models/processes, boundary conditions can define state variables which may be computed from other state variables or from input data in compute_auxiliary!.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.variables-Tuple{Vararg{Union{Terrarium.AbstractVariable, Terrarium.Namespace}}}","page":"API Reference","title":"Terrarium.variables","text":"Alias for Variables(vars...)\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.variables-Union{Tuple{SoilHydrology{NF, VerticalFlow, Runoff, SoilET, SoilHydraulics} where {VerticalFlow<:Terrarium.AbstractVerticalFlow, Runoff<:Terrarium.AbstractSoilRunoff, SoilET<:Union{Nothing, Terrarium.AbstractSoilET}, SoilHydraulics<:(Terrarium.AbstractSoilHydraulics{NF})}}, Tuple{NF}} where NF","page":"API Reference","title":"Terrarium.variables","text":"State variables for SoilHydrology processes.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.varname-Tuple{Terrarium.AbstractVariable}","page":"API Reference","title":"Terrarium.varname","text":"varname(var)\n\n\nRetrieve the name of the given variable or closure. For closure relations, varname should return the name of the variable returned by the closure relation.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.varunits-Tuple{Terrarium.AbstractVariable}","page":"API Reference","title":"Terrarium.varunits","text":"varunits(var)\n\n\nRetrieve the physical units for the given variable.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.volumetric_fractions-Tuple{SoilComposition}","page":"API Reference","title":"Terrarium.volumetric_fractions","text":"volumetric_fractions(soil::SoilComposition)\n\nCalculates the volumetric fractions of all constituents in the given soil volume and returns them as a named tuple of the form (; water, ice, air, mineral, organic).\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Terrarium.wilting_point","page":"API Reference","title":"Terrarium.wilting_point","text":"Compute the empirical wilting point of the soil.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Terrarium.workspec-Union{Tuple{Oceananigans.Fields.AbstractField{LX, LY, LZ}}, Tuple{LZ}, Tuple{LY}, Tuple{LX}} where {LX, LY, LZ}","page":"API Reference","title":"Terrarium.workspec","text":"Returns the appropriate workspec for the given AbstractField or based on the given field locations.\n\n\n\n\n\n","category":"method"},{"location":"physics/vegetation/#Vegetation","page":"Vegetation","title":"Vegetation","text":"","category":"section"},{"location":"physics/vegetation/","page":"Vegetation","title":"Vegetation","text":"warning: Warning\nThis page is a work in progress. If you have any questions or notice any errors, please raise an issue.","category":"page"},{"location":"physics/vegetation/","page":"Vegetation","title":"Vegetation","text":"Coming soon!","category":"page"},{"location":"overview/mathematical_formulation/#Mathematical-formulation","page":"Mathematical formulation","title":"Mathematical formulation","text":"","category":"section"},{"location":"overview/mathematical_formulation/","page":"Mathematical formulation","title":"Mathematical formulation","text":"Terrarium.jl strictly follows a philosophy of dynamical modeling via discretized differential equations. This means that all physical processes in the model must be written as terms in a set of continuous-time equations of the form:","category":"page"},{"location":"overview/mathematical_formulation/","page":"Mathematical formulation","title":"Mathematical formulation","text":"fracpartial u(xt)partial t = G(u(xt)) + F(xt)","category":"page"},{"location":"overview/mathematical_formulation/","page":"Mathematical formulation","title":"Mathematical formulation","text":"where u(xt) is a field describing the prognostic state of the system, t is time, F is a focing term, and G is a (differentiable) function which computes the tendencies, i.e. the change in the prognostic state at the current time, t.","category":"page"},{"location":"overview/mathematical_formulation/","page":"Mathematical formulation","title":"Mathematical formulation","text":"In many areas of science and engineering, this approach to modeling is fairly standard. It can be contrasted, however, with discrete-time dynamical modeling where state changes are computed according to a series of discrete update rules, mathbfD, with some fixed time resolution,","category":"page"},{"location":"overview/mathematical_formulation/","page":"Mathematical formulation","title":"Mathematical formulation","text":"mathbfu_t+1 = mathbfD(mathbfu_t)","category":"page"},{"location":"overview/mathematical_formulation/","page":"Mathematical formulation","title":"Mathematical formulation","text":"The continuous-time formulation has three key advantages over the discrete approach:","category":"page"},{"location":"overview/mathematical_formulation/","page":"Mathematical formulation","title":"Mathematical formulation","text":"Faithfulness to realistic physical processes. Within the context of Earth system modeling, we are primarily interested in processes that operate continuously in time, not in discrete steps. Although the physics of land models may lack a well-defined ‚Äúdynamical core‚Äù of fluid dynamics like those found in atmosphere and ocean models, they are still ultimately centered around hydrological, thermodynamic, and biological processes that have continuous-time dynamics. As such, we believe that it is generally preferable to build models that follow this structure.\nFlexibility in timestepping and error control. Discrete-time formulations of dynamical systems necessarily require strong assumptions about the time-discretization of the system which often amount to a form of forward Euler with a fixed timestep size. Re-adjustment of the timestep size in mathbfD is sometimes achieved by rescaling rate parameters. However, this rescaling makes the strong assumption that the dynamics of the system scale linearly with the timescale and ignores potential feedback mechanisms and scale-dependent interactions in the dynamics. Continuous-time formulations relax this assumption and permit a much broader range of timestepping strategies that can account for nonlinearity and are thus, in our view, better suited to the simulation of coupled physical processes.\nHeterogeneous temporal resolution. Data assimilation and parameter estimation problems often necessitate the comparison of model outputs with observational time series data. These data often come at differing temporal resolutions and have irregular sample spacing due to, e.g. missing values. This can pose a problem for discrete-time models which must either (i) rescale the timestep to match the data, which has significant physical implications, or (ii) resort to temporal interpolation of the model outputs which is likely to violate the underlying physical conservation laws. Continuous-time systems do not have this problem since the timestep can always be adapted to obtain output at any set of time points.","category":"page"},{"location":"overview/mathematical_formulation/","page":"Mathematical formulation","title":"Mathematical formulation","text":"Note that one common problem in continuous-time dynamical modeling is the representation of discontinuous or instantaneous events/disruptions to the system. Such events can, however,  be handled through the use of callback functions based on the (discretized) state mathbfu. These cases should nonetheless be considered the exception rather than the rule.","category":"page"},{"location":"overview/mathematical_formulation/#Practical-implications","page":"Mathematical formulation","title":"Practical implications","text":"","category":"section"},{"location":"overview/mathematical_formulation/","page":"Mathematical formulation","title":"Mathematical formulation","text":"While the above modeling philosophy has many advantages, it also places some practical restrictions on how we code the model physics. The most important constraints are:","category":"page"},{"location":"overview/mathematical_formulation/","page":"Mathematical formulation","title":"Mathematical formulation","text":"Prognostic (i.e. time-integrated) state variables must be clearly and coherently distinguished from all other auxiliary variables derived from the prognostic state.\nPrognostic variables of the system should only be updated by the timestepper (or callback) and should not be otherwise modified by the physical processes within a single timestep. Note that this effectively rules out all classical ‚Äúbucket schemes‚Äù for soil hydrology which rely on non-physical, instantaneous routing of water between soil layers.\nFor physical coherence, tendencies must be computed only based on the current state of the system. Similarly, all non-prognostic (auxiliary) variables should be derived only from the prognostic state and/or forcings; they should not depend on non-prognostic values from previous timesteps, except in special cases where previous values are used only for computational efficiency (e.g. iterative solvers).","category":"page"},{"location":"overview/mathematical_formulation/","page":"Mathematical formulation","title":"Mathematical formulation","text":"These restrictions can potentially be relaxed in some cases through the use of callbacks and/or nested time-stepping schemes, but the goal should always be to adhere to them as much as possible to avoid unncessary complexity.","category":"page"},{"location":"contributing/#Contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"We gladly welcome any and all contributions to Terrarium.jl. Building a new land model is a huge undertaking that no single developer or scientist can hope to achieve alone. Collaboration always has been and always will be key to building good geoscientific models. Terrarium is no exception to this, and its success will depend on the contributions of the broader community.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"There are multiple ways in which you could consider contributing to the project:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"If you have a question or an idea, raise an issue or start a discussion on the GitHub repository.\nIf you want to try implementing something, clone the repository and make a pull request. Please take note of our Software development practices below.\nIf you're not able to directly contribute yet but would like to support our work, consider sharing the GitHub repository (or this documentation) with others who you think might be interested.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Regardless of how you choose to contribute, we thank you for your participation, and we look forward to working with you!","category":"page"},{"location":"contributing/#Software-development-practices","page":"Contributing","title":"Software development practices","text":"","category":"section"},{"location":"contributing/#Automated-testing-and-continuous-integration","page":"Contributing","title":"Automated testing and continuous integration","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Terrarium.jl adheres to software development standards for automated testing via continuous integration. We write unit tests for every function of our model. In some cases this might appear trivial, but we still want to achieve a near complete coverage of our code in the tests. The majority of the tests should cover the smallest possible units over different input arguments and types (if applicable). Unit tests should typically call the tested functions in a way that is representative for their use in the model, but try to reduce the computational complexity (e.g. by choosing very low dimensional inputs) to keep the overall CI time manageable. Additionally, we have some tests that ensure top-level functionality and stability of the model as well. Every additional proposed feature in a Pull Request has to come with unit tests. Tests verifying differentiability and GPU compatibility will also be requried.","category":"page"},{"location":"contributing/#Kernel-programming","page":"Contributing","title":"Kernel programming","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Terrarium.jl is a device-agnostic model that runs on CPUs and GPUs by using KernelAbstractions.jl. This means that most computations need to be implemented within kernel functions that follow KernelAbstractions‚Äô syntax. Each thread in the CPU or GPU will then compute the discretized equations for a single grid point.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"For writing kernels we follow a strategy closely inspired by Oceaninanigans.jl: we want to fuse kernels as much as possible. Kernel fusion means that in practice we write very ‚Äúlarge‚Äù kernels that fuse as many operations as possible together in one kernel. Kernel fusion leads to more efficient GPU computations, especially by reducing memory demand (Wang et. al 2000). In order to still keep our code well structured and modular, our approach relies on implementing most processes as inlined functions that can be called from a GPU kernel. We have not yet found any significant limitations to this approach.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"How this looks in action in Terrarium.jl you can already see in the prototype code, e.g. for the SoilEnergyBalance: There compute_tendencies! is the mandatory function for the model component, it launches exactly one kernel compute_energy_tendency!, which includes several @inline function to compute individual contributions to the energy balance such as energy_tendency, thermalconductivity and the diffusive_heat_flux.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"It's also worth checking out the Simulation tips provided in the documentation for Oceananigans.","category":"page"},{"location":"contributing/#Automatic-Differentiation-with-Enzyme","page":"Contributing","title":"Automatic Differentiation with Enzyme","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"For AD, we rely primarily on reverse mode differentiation via Enzyme.jl. In contrast to many other AD systems, Enzyme doesn‚Äôt put particularly strong restrictions on coding style. For example, Array mutations are not only allowed, they are even encouraged!","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"There is one thing however, that is crucial for Enzyme to work: type stability. The code absolutely has to be type stable, even in parts that are performance non-critical. Every occurrence of type instability may break differentiability with Enzyme. If this happens, we recommend first quickly checking for type instability of core function calls using @code_warntype and @inferred in unit tests. Then, if the issue is not yet apparent, debug the code using Cthulhu.jl. Cthulhu is an awesome tool to interactively inspect your code for type instabilities and it is extremely easy to run: just preempt the function that you are trying to differentiate with @descend after loading the Cthulhu package.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Enzyme does, however, have some disadvantages; it is still not fully mature and bugs do occur. As of the time of writing (August 2025), this is especially the case for Julia 1.11. We currently recommend staying on Julia 1.10.10 (LTS) for the time being. Other cryptic Enzyme error messages have become rarer with time, but they do still occasionally happen. In these cases, we, along with our AD team led by Valentin in the DELTA-ESM project, are happy to offer support to the best of our abilities.","category":"page"},{"location":"#Terrarium.jl","page":"Home","title":"Terrarium.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Terrarium.jl is a new and upcoming land model that aims to support hybrid physics- and data-driven land modeling across multiple spatial and temporal scales. We envision Terrarium to be part of a new generation of Earth system component models that combine modularity, interactivity, GPU-compability and auto-differentiability (AD) for seamless integration of process-based and data-driven model components in both global and regional scale simulations.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Terrarium is being developed alongside SpeedyWeather.jl and Oceananigans.jl as the land component of a new, user-friendly, and fully GPU/AD-compatible Earth System Model in the Julia programming language.","category":"page"},{"location":"","page":"Home","title":"Home","text":"warning: üößüöß Under construction üößüöß\nThis is an early prototype of our model and is not production-ready. Expect things to change rapidly and break often. If you share our vision for a new paradigm of Earth system modeling and would like to get involved in the project, don‚Äôt hesitate to reach out by creating an issue on GitHub issues or sending us an email. We are always happy to welcome new collaborators!","category":"page"},{"location":"#Table-of-contents","page":"Home","title":"Table of contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"overview/mathematical_formulation.md\",\n    \"overview/software_architecture.md\",\n    \"api_reference.md\",\n]\nDepth = 3","category":"page"}]
}
